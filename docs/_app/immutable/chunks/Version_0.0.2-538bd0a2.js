import{S as tn,i as en,s as on,k as o,q as p,a as r,l as c,m as i,r as l,h as n,c as u,n as k,b as t,G as e,B as xs}from"./index-b0905f39.js";function pn(Ys){let d,ls,G,P,is,j,m,rs,v,us,ks,B,S,fs,F,I,ds,z,f,y,ms,b,hs,ws,vs,V,ys,bs,_,_s,E,Es,gs,J,h,Ts,g,As,Ps,K,L,Ss,M,U,Is,N,R,Ls,O,q,Us,Q,H,Rs,W,T,Zs=`<code class="language-ts"><span class="token comment">// define database provider that we use</span>
datasource db <span class="token punctuation">&#123;</span>
    provider <span class="token operator">=</span> <span class="token string">"sqlite"</span>
    <span class="token comment">// url is stored in .env file so that users cant see the url</span>
    url      <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">"DATABASE_URL"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// define the database tabels referred to as models</span>
model User <span class="token punctuation">&#123;</span>
    <span class="token comment">// unique individual id for each user</span>
    id              String <span class="token decorator"><span class="token at operator">@</span><span class="token function">id</span></span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">unique</span></span> @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// no username can be taken twice</span>
    username        String <span class="token decorator"><span class="token at operator">@</span><span class="token function">unique</span></span>
    <span class="token comment">// hash of the password to not store a clear password</span>
    passwordHash    String
    <span class="token comment">// unique token used for the cookie</span>
    userAuthToken   String <span class="token decorator"><span class="token at operator">@</span><span class="token function">unique</span></span>

    createdAt   DateTime @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    updatedAt   DateTime <span class="token decorator"><span class="token at operator">@</span><span class="token function">updatedAt</span></span>
    <span class="token comment">// assign a role to the user used to seperate users and admins</span>
    <span class="token comment">// using prisma relations to reference the Roles model</span>
    <span class="token comment">// pointing to the id in the Roles model</span>
    role        Roles   <span class="token decorator"><span class="token at operator">@</span><span class="token function">relation</span></span><span class="token punctuation">(</span>fields<span class="token operator">:</span> <span class="token punctuation">[</span>roleId<span class="token punctuation">]</span><span class="token punctuation">,</span> references<span class="token operator">:</span> <span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span>
    roleId      Int
<span class="token punctuation">&#125;</span>

model Roles <span class="token punctuation">&#123;</span>
  id   Int    <span class="token decorator"><span class="token at operator">@</span><span class="token function">id</span></span> @<span class="token keyword">default</span><span class="token punctuation">(</span><span class="token function">autoincrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  name String <span class="token decorator"><span class="token at operator">@</span><span class="token function">unique</span></span>
  User User<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,$,C,qs,X,A,sn=`<code class="language-ts"><span class="token comment">// function to redirect users that are logged away from the login page</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> load<span class="token operator">:</span> <span class="token function-variable function">PageServerLoad</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> locals <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// redirect user if logged in</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>locals<span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">throw</span> <span class="token function">redirect</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// first we request the username and password from the html form</span>
<span class="token keyword">const</span> username <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> password <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>

<span class="token comment">// check if somebody trys to bamboozle us</span>
<span class="token comment">// if a username/password is not a string or nonexistent fail</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token keyword">typeof</span> username <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>
    <span class="token keyword">typeof</span> password <span class="token operator">!==</span> <span class="token string">'string'</span> <span class="token operator">||</span>
    <span class="token operator">!</span>username <span class="token operator">||</span>
    <span class="token operator">!</span>password
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> invalid<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// if that worked we request the user from the database</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> database<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">findUnique</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> where<span class="token operator">:</span> <span class="token punctuation">&#123;</span> username <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// now we also need to import the database on the top</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> database <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$lib/database'</span>

<span class="token comment">// now we compare the password entered and the password from the database</span>
<span class="token keyword">const</span> userPassword <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>passwordHash<span class="token punctuation">)</span>

<span class="token comment">// if that fails we return fail and say wrong credentials</span>
<span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>credentials<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// if everything went well so far</span>
<span class="token comment">// we create a new authentification token in the database</span>
<span class="token keyword">const</span> authenticatedUser <span class="token operator">=</span> <span class="token keyword">await</span> database<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    where<span class="token operator">:</span> <span class="token punctuation">&#123;</span> username<span class="token operator">:</span> user<span class="token punctuation">.</span>username <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span> userAuthToken<span class="token operator">:</span> crypto<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// set the cookie to keep the user logged in for one moth</span>
cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'session'</span><span class="token punctuation">,</span> authenticatedUser<span class="token punctuation">.</span>userAuthToken<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// send cookie for every page</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    <span class="token comment">// server side only cookie so you can't use &#96;document.cookie&#96;</span>
    httpOnly<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// only requests from same site can send cookies</span>
    <span class="token comment">// https://developer.mozilla.org/en-US/docs/Glossary/CSRF</span>
    sameSite<span class="token operator">:</span> <span class="token string">'strict'</span><span class="token punctuation">,</span>
    <span class="token comment">// only sent over HTTPS in production</span>
    secure<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">,</span>
    <span class="token comment">// set cookie to expire after a month</span>
    maxAge<span class="token operator">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
</code>`,Y,Z,ss,ns,as,w,Hs,ts,x,Cs;return{c(){d=o("h1"),ls=p("Login"),G=r(),P=o("h2"),is=p("Description"),j=r(),m=o("p"),rs=p("After having a good starting point and some inspiration I worked on some login functionality on the website. That way every different user could have the website presented to him in a different way. This "),v=o("a"),us=p("tutorial"),ks=p(" by Joy of Code was recommended to me on how to implement this functionality using cookies and a prisma database. I used this starting point to get familiar with prisma and databases in general."),B=r(),S=o("h2"),fs=p("Changes"),F=r(),I=o("p"),ds=p("The following changes and implementations have been made in that version of the project:"),z=r(),f=o("ul"),y=o("li"),ms=p("Installed "),b=o("a"),hs=p("Prisma"),ws=p(" and created a client with a SQLite database."),vs=r(),V=o("li"),ys=p("When user is logged in a cookie is created that saves the current session for 30 days"),bs=r(),_=o("li"),_s=p("Use "),E=o("a"),Es=p("SvelteKit Hooks"),gs=p(" to store the session for checking if the user is logged in"),J=r(),h=o("p"),Ts=p("To get a better view on how the login functionality works, watch the "),g=o("a"),As=p("tutorial"),Ps=p("."),K=r(),L=o("h2"),Ss=p("Features"),M=r(),U=o("p"),Is=p("✅ Login/Register 🧑‍💻"),N=r(),R=o("h2"),Ls=p("Code"),O=r(),q=o("p"),Us=p("In here some selected code will be explained more in depth."),Q=r(),H=o("p"),Rs=p("schema.prisma file to structure the database"),W=r(),T=o("pre"),$=r(),C=o("p"),qs=p("login/+page.server.ts to handle the login process"),X=r(),A=o("pre"),Y=r(),Z=o("hr"),ss=r(),ns=o("br"),as=p(`
Commit: `),w=o("a"),Hs=p("Version 0.0.2"),ts=r(),x=o("p"),Cs=p("Published: 2023-04-03"),this.h()},l(s){d=c(s,"H1",{});var a=i(d);ls=l(a,"Login"),a.forEach(n),G=u(s),P=c(s,"H2",{});var Ds=i(P);is=l(Ds,"Description"),Ds.forEach(n),j=u(s),m=c(s,"P",{});var es=i(m);rs=l(es,"After having a good starting point and some inspiration I worked on some login functionality on the website. That way every different user could have the website presented to him in a different way. This "),v=c(es,"A",{href:!0,rel:!0});var Vs=i(v);us=l(Vs,"tutorial"),Vs.forEach(n),ks=l(es," by Joy of Code was recommended to me on how to implement this functionality using cookies and a prisma database. I used this starting point to get familiar with prisma and databases in general."),es.forEach(n),B=u(s),S=c(s,"H2",{});var Gs=i(S);fs=l(Gs,"Changes"),Gs.forEach(n),F=u(s),I=c(s,"P",{});var js=i(I);ds=l(js,"The following changes and implementations have been made in that version of the project:"),js.forEach(n),z=u(s),f=c(s,"UL",{});var D=i(f);y=c(D,"LI",{});var os=i(y);ms=l(os,"Installed "),b=c(os,"A",{href:!0,rel:!0});var Bs=i(b);hs=l(Bs,"Prisma"),Bs.forEach(n),ws=l(os," and created a client with a SQLite database."),os.forEach(n),vs=u(D),V=c(D,"LI",{});var Fs=i(V);ys=l(Fs,"When user is logged in a cookie is created that saves the current session for 30 days"),Fs.forEach(n),bs=u(D),_=c(D,"LI",{});var ps=i(_);_s=l(ps,"Use "),E=c(ps,"A",{href:!0,rel:!0});var zs=i(E);Es=l(zs,"SvelteKit Hooks"),zs.forEach(n),gs=l(ps," to store the session for checking if the user is logged in"),ps.forEach(n),D.forEach(n),J=u(s),h=c(s,"P",{});var cs=i(h);Ts=l(cs,"To get a better view on how the login functionality works, watch the "),g=c(cs,"A",{href:!0,rel:!0});var Js=i(g);As=l(Js,"tutorial"),Js.forEach(n),Ps=l(cs,"."),cs.forEach(n),K=u(s),L=c(s,"H2",{});var Ks=i(L);Ss=l(Ks,"Features"),Ks.forEach(n),M=u(s),U=c(s,"P",{});var Ms=i(U);Is=l(Ms,"✅ Login/Register 🧑‍💻"),Ms.forEach(n),N=u(s),R=c(s,"H2",{});var Ns=i(R);Ls=l(Ns,"Code"),Ns.forEach(n),O=u(s),q=c(s,"P",{});var Os=i(q);Us=l(Os,"In here some selected code will be explained more in depth."),Os.forEach(n),Q=u(s),H=c(s,"P",{});var Qs=i(H);Rs=l(Qs,"schema.prisma file to structure the database"),Qs.forEach(n),W=u(s),T=c(s,"PRE",{class:!0});var nn=i(T);nn.forEach(n),$=u(s),C=c(s,"P",{});var Ws=i(C);qs=l(Ws,"login/+page.server.ts to handle the login process"),Ws.forEach(n),X=u(s),A=c(s,"PRE",{class:!0});var an=i(A);an.forEach(n),Y=u(s),Z=c(s,"HR",{}),ss=u(s),ns=c(s,"BR",{}),as=l(s,`
Commit: `),w=c(s,"A",{href:!0,target:!0});var $s=i(w);Hs=l($s,"Version 0.0.2"),$s.forEach(n),ts=u(s),x=c(s,"P",{});var Xs=i(x);Cs=l(Xs,"Published: 2023-04-03"),Xs.forEach(n),this.h()},h(){k(v,"href","https://youtu.be/E3VG-dLCRUk"),k(v,"rel","nofollow"),k(b,"href","https://prisma.io"),k(b,"rel","nofollow"),k(E,"href","https://kit.svelte.dev/docs/hooks"),k(E,"rel","nofollow"),k(g,"href","https://youtu.be/E3VG-dLCRUk"),k(g,"rel","nofollow"),k(T,"class","language-ts"),k(A,"class","language-ts"),k(w,"href","https://github.com/hartmann-jonas/movie-db-two/commit/c2b56d39d412752416717362c337289abdf3c189"),k(w,"target","_blank")},m(s,a){t(s,d,a),e(d,ls),t(s,G,a),t(s,P,a),e(P,is),t(s,j,a),t(s,m,a),e(m,rs),e(m,v),e(v,us),e(m,ks),t(s,B,a),t(s,S,a),e(S,fs),t(s,F,a),t(s,I,a),e(I,ds),t(s,z,a),t(s,f,a),e(f,y),e(y,ms),e(y,b),e(b,hs),e(y,ws),e(f,vs),e(f,V),e(V,ys),e(f,bs),e(f,_),e(_,_s),e(_,E),e(E,Es),e(_,gs),t(s,J,a),t(s,h,a),e(h,Ts),e(h,g),e(g,As),e(h,Ps),t(s,K,a),t(s,L,a),e(L,Ss),t(s,M,a),t(s,U,a),e(U,Is),t(s,N,a),t(s,R,a),e(R,Ls),t(s,O,a),t(s,q,a),e(q,Us),t(s,Q,a),t(s,H,a),e(H,Rs),t(s,W,a),t(s,T,a),T.innerHTML=Zs,t(s,$,a),t(s,C,a),e(C,qs),t(s,X,a),t(s,A,a),A.innerHTML=sn,t(s,Y,a),t(s,Z,a),t(s,ss,a),t(s,ns,a),t(s,as,a),t(s,w,a),e(w,Hs),t(s,ts,a),t(s,x,a),e(x,Cs)},p:xs,i:xs,o:xs,d(s){s&&n(d),s&&n(G),s&&n(P),s&&n(j),s&&n(m),s&&n(B),s&&n(S),s&&n(F),s&&n(I),s&&n(z),s&&n(f),s&&n(J),s&&n(h),s&&n(K),s&&n(L),s&&n(M),s&&n(U),s&&n(N),s&&n(R),s&&n(O),s&&n(q),s&&n(Q),s&&n(H),s&&n(W),s&&n(T),s&&n($),s&&n(C),s&&n(X),s&&n(A),s&&n(Y),s&&n(Z),s&&n(ss),s&&n(ns),s&&n(as),s&&n(w),s&&n(ts),s&&n(x)}}}const ln={title:"Version 0.0.2",date:"2023-04-17"};class rn extends tn{constructor(d){super(),en(this,d,null,pn,on,{})}}export{rn as default,ln as metadata};
